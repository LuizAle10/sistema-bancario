package SistemaBancarioTestes;

import static org.junit.Assert.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;

import SistemaBancario.ContaCorrente;
import SistemaBancario.GerenciadoraContas;

public class GerenciadoraContasTests {

	private gerenciadoraContas gerContas;
	
	/*
	 * Teste b�sico da transfer�ncia de um valor da conta de um cliente para outro,
	 * estando ambos os clientes ativos e havendo saldo suficiente para tal transferencia
	 * ocorrer com sucesso.
	 */

	@Test
	public void testTransfereValor() {
		/* ========== Montagem do cenario========== */

		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, 200, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, 0, true);

		// inserindo os clientes criados na lista de clientes do banco		
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);
		
		gerContas = new GerenciadoraContas(contasDoBanco);
		
		/* ========== Execução======== */	
		boolean sucesso = gerContas.transfereValor(idConta01, 100, idConta02);
			
		
		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertThat(conta02.getSaldo(), is(100.0));
		assertThat(conta01.getSaldo(), is(100.0));
		
		
		/*
		 * Teste basico da tentativa de transferencia de um valor da conta de um cliente para outro
		 * quando n�o h� saldo suficiente, mas o saldo   positivo.
		 */
		
		@Test
		public void testTransfereValor_SaldoInsuficiente() {
			/* ========== Montagem do cen�rio ========== */
			
			// criando alguns clientes
			int idConta01 = 1;
			int idConta02 = 2;
			ContaCorrente conta01 = new ContaCorrente(idConta01, -100, true);
			ContaCorrente conta02 = new ContaCorrente(idConta02, 0, true);
			
			// inserindo os clientes criados na lista de clientes do banco
			List<ContaCorrente> contasDoBanco = new ArrayList<>();
			contasDoBanco.add(conta01);
			contasDoBanco.add(conta02);
			
			gerContas = new GerenciadoraContas(contasDoBanco);
			
			/* ========== Execução ========== */
			boolean sucesso = gerContas.transfereValor(idConta01, 200, idConta02);
			
			
			/* ========== Verificações ========== */
			assertTrue(sucesso);
			assertThat(conta01.getSaldo, is(-300.0));
			assertThat(conta02.getSaldo(), is(200.0));
		}
		
		/*
		 * Teste b�sico da tentativa de transfer�ncia de um valor da conta de um cliente para outro
		 * quando o saldo do cliente origem � negativo e do cliente destino tamb�m � negativo.
		 */
		
		
		
		
		
		

	}

}300
