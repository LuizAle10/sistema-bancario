package SistemaBancarioTestes;


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;

import SistemaBancario.ContaCorrente;
import SistemaBancario.GerenciadoraContas;

public class GerenciadoraContasTest {

	private GerenciadoraContas gerContas;

	/*
	 * Teste básico da transferencia de um valor da conta de um cliente para outro,
	 * estando ambos os clientes ativos e havendo saldo suficiente para tal
	 * transferencia ocorrer com sucesso.
	 */

	@Test
	public void testTransfereValor() {
		/* ========== Montagem do cenario========== */

		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, 200, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, 0, true);

		// inserindo os clientes criados na lista de clientes do banco
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);

		gerContas = new GerenciadoraContas(contasDoBanco);

		/* ========== Execução======== */
		boolean sucesso = gerContas.transfereValor(idConta01, 100, idConta02);

		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertEquals(100.0, conta02.getSaldo(), "Saldo");
		assertEquals(100.0, conta01.getSaldo(), "Saldo");

	}

	/*
	 * Teste basico da tentativa de transferencia de um valor da conta de um cliente
	 * para outro quando n�o h� saldo suficiente, mas o saldo positivo.
	 */

	@Test
	public void testTransfereValor_SaldoInsuficiente() {
		/* ========== Montagem do cenário ========== */

		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, 100, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, 0, true);

		// inserindo os clientes criados na lista de clientes do banco
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);

		gerContas = new GerenciadoraContas(contasDoBanco);

		/* ========== Execução ========== */
		boolean sucesso = gerContas.transfereValor(idConta01, 200, idConta02);

		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertEquals(-100.0, conta01.getSaldo(), "Saldo incorreto");
		assertEquals(200.0, conta02.getSaldo(), "Saldo incorreto");
	}

	/**
	 * Teste b�sico da tentativa de transfer�ncia de um valor da conta de um cliente
	 * para outro quando não há saldo suficiente e o saldo é negativo.
	 */
	@Test
	public void testTransfereValor_SaldoNegativo() {

		/* ========== Montagem do cenário ========== */

		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, -100, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, 0, true);

		// inserindo os clientes criados na lista de clientes do banco
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);

		gerContas = new GerenciadoraContas(contasDoBanco);

		/* ========== Execução ========== */
		boolean sucesso = gerContas.transfereValor(idConta01, 200, idConta02);

		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertEquals(-300.0, conta01.getSaldo(), "Saldo incorreto");
		assertEquals(200.0, conta02.getSaldo(), "Saldo incorreto");
	}

	/*
	 * Teste básico da tentativa de transferencia de um valor da conta de um cliente
	 * para outro quando o saldo do cliente origem é negativo e do cliente destino
	 * também é negativo.
	 */

	@Test
	public void testTransfereValor_SaldoNegativoParaNegativo() {
		/* ========== Montagem do cenário ========== */
		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, -100, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, -100, true);

		// inserindo os clientes criados na lista de clientes do banco
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);

		gerContas = new GerenciadoraContas(contasDoBanco);

		/* ========== Execução ========== */
		boolean sucesso = gerContas.transfereValor(idConta01, 200, idConta02);

		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertEquals(-300.0, conta01.getSaldo(), "Saldo incorreto");
		assertEquals(100.0, conta02.getSaldo(), "Saldo incorreto");

	}

	/*
	 * Teste básico da tentativa de transferencia de um valor nulo da conta de um
	 * cliente para outro.
	 */

	@Test
	public void testTransfereValor_Nenhum() {

		/* ========== Montagem do cenário ========== */

		// criando alguns clientes
		int idConta01 = 1;
		int idConta02 = 2;
		ContaCorrente conta01 = new ContaCorrente(idConta01, -100, true);
		ContaCorrente conta02 = new ContaCorrente(idConta02, -100, true);

		// inserindo os clientes criados na lista de clientes do banco
		List<ContaCorrente> contasDoBanco = new ArrayList<>();
		contasDoBanco.add(conta01);
		contasDoBanco.add(conta02);

		gerContas = new GerenciadoraContas(contasDoBanco);

		/* ========== Execução ========== */
		boolean sucesso = gerContas.transfereValor(idConta01, 2, idConta02);

		/* ========== Verificações ========== */
		assertTrue(sucesso);
		assertEquals(-102.0, conta01.getSaldo(), "Saldo incorreto");
		assertEquals(-98.0, conta02.getSaldo(), "Saldo incorreto");

		
	}

}
